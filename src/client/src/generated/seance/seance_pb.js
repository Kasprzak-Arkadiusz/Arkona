// source: seance.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.seance.ChooseSeatRequest', null, global);
goog.exportSymbol('proto.seance.ChooseSeatResponse', null, global);
goog.exportSymbol('proto.seance.CinemaHallSection', null, global);
goog.exportSymbol('proto.seance.GetClosestSeancesRequest', null, global);
goog.exportSymbol('proto.seance.GetClosestSeancesResponse', null, global);
goog.exportSymbol('proto.seance.GetSeanceDetailsRequest', null, global);
goog.exportSymbol('proto.seance.GetSeanceDetailsResponse', null, global);
goog.exportSymbol('proto.seance.GetSeatsBySeanceRequest', null, global);
goog.exportSymbol('proto.seance.GetSeatsBySeanceResponse', null, global);
goog.exportSymbol('proto.seance.SeanceInfo', null, global);
goog.exportSymbol('proto.seance.SeanceInfoArray', null, global);
goog.exportSymbol('proto.seance.SeanceSeatInfo', null, global);
goog.exportSymbol('proto.seance.SeanceSeatSection', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seance.GetClosestSeancesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seance.GetClosestSeancesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seance.GetClosestSeancesRequest.displayName = 'proto.seance.GetClosestSeancesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seance.GetClosestSeancesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.seance.GetClosestSeancesResponse.repeatedFields_, null);
};
goog.inherits(proto.seance.GetClosestSeancesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seance.GetClosestSeancesResponse.displayName = 'proto.seance.GetClosestSeancesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seance.SeanceInfoArray = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.seance.SeanceInfoArray.repeatedFields_, null);
};
goog.inherits(proto.seance.SeanceInfoArray, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seance.SeanceInfoArray.displayName = 'proto.seance.SeanceInfoArray';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seance.SeanceInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seance.SeanceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seance.SeanceInfo.displayName = 'proto.seance.SeanceInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seance.GetSeatsBySeanceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seance.GetSeatsBySeanceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seance.GetSeatsBySeanceRequest.displayName = 'proto.seance.GetSeatsBySeanceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seance.GetSeatsBySeanceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.seance.GetSeatsBySeanceResponse.repeatedFields_, null);
};
goog.inherits(proto.seance.GetSeatsBySeanceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seance.GetSeatsBySeanceResponse.displayName = 'proto.seance.GetSeatsBySeanceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seance.SeanceSeatSection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.seance.SeanceSeatSection.repeatedFields_, null);
};
goog.inherits(proto.seance.SeanceSeatSection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seance.SeanceSeatSection.displayName = 'proto.seance.SeanceSeatSection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seance.SeanceSeatInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seance.SeanceSeatInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seance.SeanceSeatInfo.displayName = 'proto.seance.SeanceSeatInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seance.ChooseSeatRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seance.ChooseSeatRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seance.ChooseSeatRequest.displayName = 'proto.seance.ChooseSeatRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seance.ChooseSeatResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seance.ChooseSeatResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seance.ChooseSeatResponse.displayName = 'proto.seance.ChooseSeatResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seance.GetSeanceDetailsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seance.GetSeanceDetailsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seance.GetSeanceDetailsRequest.displayName = 'proto.seance.GetSeanceDetailsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seance.GetSeanceDetailsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seance.GetSeanceDetailsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seance.GetSeanceDetailsResponse.displayName = 'proto.seance.GetSeanceDetailsResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seance.GetClosestSeancesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.seance.GetClosestSeancesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seance.GetClosestSeancesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seance.GetClosestSeancesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    movieid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seance.GetClosestSeancesRequest}
 */
proto.seance.GetClosestSeancesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seance.GetClosestSeancesRequest;
  return proto.seance.GetClosestSeancesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seance.GetClosestSeancesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seance.GetClosestSeancesRequest}
 */
proto.seance.GetClosestSeancesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMovieid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seance.GetClosestSeancesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seance.GetClosestSeancesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seance.GetClosestSeancesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seance.GetClosestSeancesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMovieid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 movieId = 1;
 * @return {number}
 */
proto.seance.GetClosestSeancesRequest.prototype.getMovieid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.seance.GetClosestSeancesRequest} returns this
 */
proto.seance.GetClosestSeancesRequest.prototype.setMovieid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.seance.GetClosestSeancesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seance.GetClosestSeancesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.seance.GetClosestSeancesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seance.GetClosestSeancesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seance.GetClosestSeancesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.seance.SeanceInfoArray.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seance.GetClosestSeancesResponse}
 */
proto.seance.GetClosestSeancesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seance.GetClosestSeancesResponse;
  return proto.seance.GetClosestSeancesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seance.GetClosestSeancesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seance.GetClosestSeancesResponse}
 */
proto.seance.GetClosestSeancesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.seance.SeanceInfoArray;
      reader.readMessage(value,proto.seance.SeanceInfoArray.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seance.GetClosestSeancesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seance.GetClosestSeancesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seance.GetClosestSeancesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seance.GetClosestSeancesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.seance.SeanceInfoArray.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SeanceInfoArray values = 1;
 * @return {!Array<!proto.seance.SeanceInfoArray>}
 */
proto.seance.GetClosestSeancesResponse.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.seance.SeanceInfoArray>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.seance.SeanceInfoArray, 1));
};


/**
 * @param {!Array<!proto.seance.SeanceInfoArray>} value
 * @return {!proto.seance.GetClosestSeancesResponse} returns this
*/
proto.seance.GetClosestSeancesResponse.prototype.setValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.seance.SeanceInfoArray=} opt_value
 * @param {number=} opt_index
 * @return {!proto.seance.SeanceInfoArray}
 */
proto.seance.GetClosestSeancesResponse.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.seance.SeanceInfoArray, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.seance.GetClosestSeancesResponse} returns this
 */
proto.seance.GetClosestSeancesResponse.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.seance.SeanceInfoArray.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seance.SeanceInfoArray.prototype.toObject = function(opt_includeInstance) {
  return proto.seance.SeanceInfoArray.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seance.SeanceInfoArray} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seance.SeanceInfoArray.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seancesList: jspb.Message.toObjectList(msg.getSeancesList(),
    proto.seance.SeanceInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seance.SeanceInfoArray}
 */
proto.seance.SeanceInfoArray.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seance.SeanceInfoArray;
  return proto.seance.SeanceInfoArray.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seance.SeanceInfoArray} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seance.SeanceInfoArray}
 */
proto.seance.SeanceInfoArray.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.seance.SeanceInfo;
      reader.readMessage(value,proto.seance.SeanceInfo.deserializeBinaryFromReader);
      msg.addSeances(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seance.SeanceInfoArray.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seance.SeanceInfoArray.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seance.SeanceInfoArray} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seance.SeanceInfoArray.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeancesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.seance.SeanceInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.seance.SeanceInfoArray.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.seance.SeanceInfoArray} returns this
 */
proto.seance.SeanceInfoArray.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated SeanceInfo seances = 2;
 * @return {!Array<!proto.seance.SeanceInfo>}
 */
proto.seance.SeanceInfoArray.prototype.getSeancesList = function() {
  return /** @type{!Array<!proto.seance.SeanceInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.seance.SeanceInfo, 2));
};


/**
 * @param {!Array<!proto.seance.SeanceInfo>} value
 * @return {!proto.seance.SeanceInfoArray} returns this
*/
proto.seance.SeanceInfoArray.prototype.setSeancesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.seance.SeanceInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.seance.SeanceInfo}
 */
proto.seance.SeanceInfoArray.prototype.addSeances = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.seance.SeanceInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.seance.SeanceInfoArray} returns this
 */
proto.seance.SeanceInfoArray.prototype.clearSeancesList = function() {
  return this.setSeancesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seance.SeanceInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.seance.SeanceInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seance.SeanceInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seance.SeanceInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    time: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seance.SeanceInfo}
 */
proto.seance.SeanceInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seance.SeanceInfo;
  return proto.seance.SeanceInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seance.SeanceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seance.SeanceInfo}
 */
proto.seance.SeanceInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seance.SeanceInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seance.SeanceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seance.SeanceInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seance.SeanceInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTime();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.seance.SeanceInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.seance.SeanceInfo} returns this
 */
proto.seance.SeanceInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string time = 2;
 * @return {string}
 */
proto.seance.SeanceInfo.prototype.getTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.seance.SeanceInfo} returns this
 */
proto.seance.SeanceInfo.prototype.setTime = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seance.GetSeatsBySeanceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.seance.GetSeatsBySeanceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seance.GetSeatsBySeanceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seance.GetSeatsBySeanceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    seanceid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seance.GetSeatsBySeanceRequest}
 */
proto.seance.GetSeatsBySeanceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seance.GetSeatsBySeanceRequest;
  return proto.seance.GetSeatsBySeanceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seance.GetSeatsBySeanceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seance.GetSeatsBySeanceRequest}
 */
proto.seance.GetSeatsBySeanceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeanceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seance.GetSeatsBySeanceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seance.GetSeatsBySeanceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seance.GetSeatsBySeanceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seance.GetSeatsBySeanceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeanceid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 seanceId = 1;
 * @return {number}
 */
proto.seance.GetSeatsBySeanceRequest.prototype.getSeanceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.seance.GetSeatsBySeanceRequest} returns this
 */
proto.seance.GetSeatsBySeanceRequest.prototype.setSeanceid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.seance.GetSeatsBySeanceResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seance.GetSeatsBySeanceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.seance.GetSeatsBySeanceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seance.GetSeatsBySeanceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seance.GetSeatsBySeanceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    numberofrows: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sectionsList: jspb.Message.toObjectList(msg.getSectionsList(),
    proto.seance.SeanceSeatSection.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seance.GetSeatsBySeanceResponse}
 */
proto.seance.GetSeatsBySeanceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seance.GetSeatsBySeanceResponse;
  return proto.seance.GetSeatsBySeanceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seance.GetSeatsBySeanceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seance.GetSeatsBySeanceResponse}
 */
proto.seance.GetSeatsBySeanceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumberofrows(value);
      break;
    case 2:
      var value = new proto.seance.SeanceSeatSection;
      reader.readMessage(value,proto.seance.SeanceSeatSection.deserializeBinaryFromReader);
      msg.addSections(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seance.GetSeatsBySeanceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seance.GetSeatsBySeanceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seance.GetSeatsBySeanceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seance.GetSeatsBySeanceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumberofrows();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.seance.SeanceSeatSection.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 numberOfRows = 1;
 * @return {number}
 */
proto.seance.GetSeatsBySeanceResponse.prototype.getNumberofrows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.seance.GetSeatsBySeanceResponse} returns this
 */
proto.seance.GetSeatsBySeanceResponse.prototype.setNumberofrows = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated SeanceSeatSection sections = 2;
 * @return {!Array<!proto.seance.SeanceSeatSection>}
 */
proto.seance.GetSeatsBySeanceResponse.prototype.getSectionsList = function() {
  return /** @type{!Array<!proto.seance.SeanceSeatSection>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.seance.SeanceSeatSection, 2));
};


/**
 * @param {!Array<!proto.seance.SeanceSeatSection>} value
 * @return {!proto.seance.GetSeatsBySeanceResponse} returns this
*/
proto.seance.GetSeatsBySeanceResponse.prototype.setSectionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.seance.SeanceSeatSection=} opt_value
 * @param {number=} opt_index
 * @return {!proto.seance.SeanceSeatSection}
 */
proto.seance.GetSeatsBySeanceResponse.prototype.addSections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.seance.SeanceSeatSection, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.seance.GetSeatsBySeanceResponse} returns this
 */
proto.seance.GetSeatsBySeanceResponse.prototype.clearSectionsList = function() {
  return this.setSectionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.seance.SeanceSeatSection.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seance.SeanceSeatSection.prototype.toObject = function(opt_includeInstance) {
  return proto.seance.SeanceSeatSection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seance.SeanceSeatSection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seance.SeanceSeatSection.toObject = function(includeInstance, msg) {
  var f, obj = {
    section: jspb.Message.getFieldWithDefault(msg, 1, 0),
    width: jspb.Message.getFieldWithDefault(msg, 2, 0),
    seatsList: jspb.Message.toObjectList(msg.getSeatsList(),
    proto.seance.SeanceSeatInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seance.SeanceSeatSection}
 */
proto.seance.SeanceSeatSection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seance.SeanceSeatSection;
  return proto.seance.SeanceSeatSection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seance.SeanceSeatSection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seance.SeanceSeatSection}
 */
proto.seance.SeanceSeatSection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.seance.CinemaHallSection} */ (reader.readEnum());
      msg.setSection(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 3:
      var value = new proto.seance.SeanceSeatInfo;
      reader.readMessage(value,proto.seance.SeanceSeatInfo.deserializeBinaryFromReader);
      msg.addSeats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seance.SeanceSeatSection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seance.SeanceSeatSection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seance.SeanceSeatSection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seance.SeanceSeatSection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSection();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getSeatsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.seance.SeanceSeatInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional CinemaHallSection section = 1;
 * @return {!proto.seance.CinemaHallSection}
 */
proto.seance.SeanceSeatSection.prototype.getSection = function() {
  return /** @type {!proto.seance.CinemaHallSection} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.seance.CinemaHallSection} value
 * @return {!proto.seance.SeanceSeatSection} returns this
 */
proto.seance.SeanceSeatSection.prototype.setSection = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 width = 2;
 * @return {number}
 */
proto.seance.SeanceSeatSection.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.seance.SeanceSeatSection} returns this
 */
proto.seance.SeanceSeatSection.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated SeanceSeatInfo seats = 3;
 * @return {!Array<!proto.seance.SeanceSeatInfo>}
 */
proto.seance.SeanceSeatSection.prototype.getSeatsList = function() {
  return /** @type{!Array<!proto.seance.SeanceSeatInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.seance.SeanceSeatInfo, 3));
};


/**
 * @param {!Array<!proto.seance.SeanceSeatInfo>} value
 * @return {!proto.seance.SeanceSeatSection} returns this
*/
proto.seance.SeanceSeatSection.prototype.setSeatsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.seance.SeanceSeatInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.seance.SeanceSeatInfo}
 */
proto.seance.SeanceSeatSection.prototype.addSeats = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.seance.SeanceSeatInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.seance.SeanceSeatSection} returns this
 */
proto.seance.SeanceSeatSection.prototype.clearSeatsList = function() {
  return this.setSeatsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seance.SeanceSeatInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.seance.SeanceSeatInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seance.SeanceSeatInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seance.SeanceSeatInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    row: jspb.Message.getFieldWithDefault(msg, 2, ""),
    number: jspb.Message.getFieldWithDefault(msg, 3, 0),
    isfree: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seance.SeanceSeatInfo}
 */
proto.seance.SeanceSeatInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seance.SeanceSeatInfo;
  return proto.seance.SeanceSeatInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seance.SeanceSeatInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seance.SeanceSeatInfo}
 */
proto.seance.SeanceSeatInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRow(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumber(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsfree(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seance.SeanceSeatInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seance.SeanceSeatInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seance.SeanceSeatInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seance.SeanceSeatInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRow();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNumber();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getIsfree();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.seance.SeanceSeatInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.seance.SeanceSeatInfo} returns this
 */
proto.seance.SeanceSeatInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string row = 2;
 * @return {string}
 */
proto.seance.SeanceSeatInfo.prototype.getRow = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.seance.SeanceSeatInfo} returns this
 */
proto.seance.SeanceSeatInfo.prototype.setRow = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 number = 3;
 * @return {number}
 */
proto.seance.SeanceSeatInfo.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.seance.SeanceSeatInfo} returns this
 */
proto.seance.SeanceSeatInfo.prototype.setNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool isFree = 4;
 * @return {boolean}
 */
proto.seance.SeanceSeatInfo.prototype.getIsfree = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.seance.SeanceSeatInfo} returns this
 */
proto.seance.SeanceSeatInfo.prototype.setIsfree = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seance.ChooseSeatRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.seance.ChooseSeatRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seance.ChooseSeatRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seance.ChooseSeatRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    seanceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    seatid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ischosen: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    makeupchanges: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seance.ChooseSeatRequest}
 */
proto.seance.ChooseSeatRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seance.ChooseSeatRequest;
  return proto.seance.ChooseSeatRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seance.ChooseSeatRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seance.ChooseSeatRequest}
 */
proto.seance.ChooseSeatRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeanceid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeatid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIschosen(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMakeupchanges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seance.ChooseSeatRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seance.ChooseSeatRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seance.ChooseSeatRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seance.ChooseSeatRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeanceid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSeatid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIschosen();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getMakeupchanges();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional int32 seanceId = 1;
 * @return {number}
 */
proto.seance.ChooseSeatRequest.prototype.getSeanceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.seance.ChooseSeatRequest} returns this
 */
proto.seance.ChooseSeatRequest.prototype.setSeanceid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 seatId = 2;
 * @return {number}
 */
proto.seance.ChooseSeatRequest.prototype.getSeatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.seance.ChooseSeatRequest} returns this
 */
proto.seance.ChooseSeatRequest.prototype.setSeatid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string userId = 3;
 * @return {string}
 */
proto.seance.ChooseSeatRequest.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.seance.ChooseSeatRequest} returns this
 */
proto.seance.ChooseSeatRequest.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool isChosen = 4;
 * @return {boolean}
 */
proto.seance.ChooseSeatRequest.prototype.getIschosen = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.seance.ChooseSeatRequest} returns this
 */
proto.seance.ChooseSeatRequest.prototype.setIschosen = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool makeUpChanges = 5;
 * @return {boolean}
 */
proto.seance.ChooseSeatRequest.prototype.getMakeupchanges = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.seance.ChooseSeatRequest} returns this
 */
proto.seance.ChooseSeatRequest.prototype.setMakeupchanges = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seance.ChooseSeatResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.seance.ChooseSeatResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seance.ChooseSeatResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seance.ChooseSeatResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isfree: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    userid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seance.ChooseSeatResponse}
 */
proto.seance.ChooseSeatResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seance.ChooseSeatResponse;
  return proto.seance.ChooseSeatResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seance.ChooseSeatResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seance.ChooseSeatResponse}
 */
proto.seance.ChooseSeatResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeatid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsfree(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seance.ChooseSeatResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seance.ChooseSeatResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seance.ChooseSeatResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seance.ChooseSeatResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getIsfree();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 seatId = 1;
 * @return {number}
 */
proto.seance.ChooseSeatResponse.prototype.getSeatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.seance.ChooseSeatResponse} returns this
 */
proto.seance.ChooseSeatResponse.prototype.setSeatid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool isFree = 2;
 * @return {boolean}
 */
proto.seance.ChooseSeatResponse.prototype.getIsfree = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.seance.ChooseSeatResponse} returns this
 */
proto.seance.ChooseSeatResponse.prototype.setIsfree = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string userId = 3;
 * @return {string}
 */
proto.seance.ChooseSeatResponse.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.seance.ChooseSeatResponse} returns this
 */
proto.seance.ChooseSeatResponse.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seance.GetSeanceDetailsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.seance.GetSeanceDetailsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seance.GetSeanceDetailsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seance.GetSeanceDetailsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    seanceid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seance.GetSeanceDetailsRequest}
 */
proto.seance.GetSeanceDetailsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seance.GetSeanceDetailsRequest;
  return proto.seance.GetSeanceDetailsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seance.GetSeanceDetailsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seance.GetSeanceDetailsRequest}
 */
proto.seance.GetSeanceDetailsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeanceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seance.GetSeanceDetailsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seance.GetSeanceDetailsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seance.GetSeanceDetailsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seance.GetSeanceDetailsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeanceid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 seanceId = 1;
 * @return {number}
 */
proto.seance.GetSeanceDetailsRequest.prototype.getSeanceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.seance.GetSeanceDetailsRequest} returns this
 */
proto.seance.GetSeanceDetailsRequest.prototype.setSeanceid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seance.GetSeanceDetailsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.seance.GetSeanceDetailsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seance.GetSeanceDetailsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seance.GetSeanceDetailsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    movietitle: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seancedate: jspb.Message.getFieldWithDefault(msg, 2, ""),
    seancetime: jspb.Message.getFieldWithDefault(msg, 3, ""),
    hallnumber: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seance.GetSeanceDetailsResponse}
 */
proto.seance.GetSeanceDetailsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seance.GetSeanceDetailsResponse;
  return proto.seance.GetSeanceDetailsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seance.GetSeanceDetailsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seance.GetSeanceDetailsResponse}
 */
proto.seance.GetSeanceDetailsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMovietitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeancedate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeancetime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHallnumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seance.GetSeanceDetailsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seance.GetSeanceDetailsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seance.GetSeanceDetailsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seance.GetSeanceDetailsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMovietitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeancedate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSeancetime();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getHallnumber();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string movieTitle = 1;
 * @return {string}
 */
proto.seance.GetSeanceDetailsResponse.prototype.getMovietitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.seance.GetSeanceDetailsResponse} returns this
 */
proto.seance.GetSeanceDetailsResponse.prototype.setMovietitle = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string seanceDate = 2;
 * @return {string}
 */
proto.seance.GetSeanceDetailsResponse.prototype.getSeancedate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.seance.GetSeanceDetailsResponse} returns this
 */
proto.seance.GetSeanceDetailsResponse.prototype.setSeancedate = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string seanceTime = 3;
 * @return {string}
 */
proto.seance.GetSeanceDetailsResponse.prototype.getSeancetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.seance.GetSeanceDetailsResponse} returns this
 */
proto.seance.GetSeanceDetailsResponse.prototype.setSeancetime = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 hallNumber = 4;
 * @return {number}
 */
proto.seance.GetSeanceDetailsResponse.prototype.getHallnumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.seance.GetSeanceDetailsResponse} returns this
 */
proto.seance.GetSeanceDetailsResponse.prototype.setHallnumber = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.seance.CinemaHallSection = {
  LEFT: 0,
  MIDDLE: 1,
  RIGHT: 2
};

goog.object.extend(exports, proto.seance);
